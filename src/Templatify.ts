import * as minifier from 'html-minifier';
import * as through2 from 'through2';
import * as path from 'path';
import * as VueCompiler from 'vue-template-compiler';

let minifierOptions = {
    caseSensitive: false,
    collapseBooleanAttributes: true,      // Not default
    collapseInlineTagWhitespace: false,
    collapseWhitespace: true,             // Not default
    conservativeCollapse: true,           // Not default
    decodeEntities: false,
    html5: true,
    includeAutoGeneratedTags: true,
    keepClosingSlash: false,
    minifyCSS: false,
    minifyJS: false,
    minifyURLs: false,
    preserveLineBreaks: false,
    preventAttributesEscaping: false,
    processConditionalComments: false,
    removeAttributeQuotes: false,
    removeComments: true,                 // Not default
    removeEmptyAttributes: false,
    removeEmptyElements: false,
    removeOptionalTags: false,
    removeRedundantAttributes: true,      // Not default
    removeScriptTypeAttributes: true,     // Not default
    removeStyleLinkTypeAttributes: true,  // Not default
    removeTagWhitespace: false,
    sortAttributes: true,                 // Not default
    sortClassName: true,                  // Not default
    trimCustomFragments: false,
    useShortDoctype: false
};

let exts = new Set<string>();
exts.add('.htm');
exts.add('.html');
//exts.add('.txt');
//exts.add('.xht');
exts.add('.xhtm');
exts.add('.xhtml');
exts.add('.tpl');

export interface TemplatifyOptions {
    mode: string
}

/**
 * A Browserify Transform for importing a non-JS file content as a string using CommonJS module.
 * @param file 
 * @param options 
 */
export default function Templatify(file: string, options: TemplatifyOptions) {
    return through2(function (buffer: Buffer, encoding, next) {
        let ext = path.extname(file).toLowerCase();

        let isTemplate = exts.has(ext);
        if (!isTemplate) {
            return next(null, buffer);
        }

        let template = buffer.toString('utf8');
        template = minifier.minify(template, minifierOptions).trim();

        let error: string = '';

        switch (options.mode) {
            case 'vue': {
                let vueResult = VueCompiler.compile(template);
                let error = vueResult.errors[0];
                if (!error) {
                    template = 'function(){'+ vueResult.render + '}';
                }
                break;
            }
            case 'string': {
                template = JSON.stringify(template);
                break;
            }
            default: {
                error = 'Unknown templatify compilation mode!';
            }
        }

        if (error) {
            return next(Error(error));
        }

        template = 'module.exports = ' + template;
        // console.log("Templatify > " + file + "\n" + template);
        return next(null, template);
    });
}

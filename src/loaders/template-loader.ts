import { loader } from 'webpack';
import { minify } from 'html-minifier';
import { compile } from 'vue-template-compiler';
import { SourceMapGenerator } from 'source-map';

let minifierOptions = {
    caseSensitive: false,
    collapseBooleanAttributes: true,      // Not default
    collapseInlineTagWhitespace: false,
    collapseWhitespace: true,             // Not default
    conservativeCollapse: true,           // Not default
    decodeEntities: false,
    html5: true,
    includeAutoGeneratedTags: true,
    keepClosingSlash: false,
    minifyCSS: false,
    minifyJS: false,
    minifyURLs: false,
    preserveLineBreaks: false,
    preventAttributesEscaping: false,
    processConditionalComments: false,
    removeAttributeQuotes: false,
    removeComments: true,                 // Not default
    removeEmptyAttributes: false,
    removeEmptyElements: false,
    removeOptionalTags: false,
    removeRedundantAttributes: true,      // Not default
    removeScriptTypeAttributes: true,     // Not default
    removeStyleLinkTypeAttributes: true,  // Not default
    removeTagWhitespace: false,
    sortAttributes: true,                 // Not default
    sortClassName: true,                  // Not default
    trimCustomFragments: false,
    useShortDoctype: false
};

function functionWrap(s: string) {
    return 'function(){' + s + '}';
}

function functionArrayWrap(ar: string[]) {
    let result = ar.map(s => functionWrap(s)).join(',');
    return '[' + result + ']';
}

module.exports = function (this: loader.LoaderContext, html: string) {
    let template = minify(html, minifierOptions).trim();
    let error = '';

    let fileName = this.resourcePath.toLowerCase();
    if (fileName.endsWith('.vue.html')) {
        let vueResult = compile(template);
        let error = vueResult.errors[0];
        if (!error) {
            template = '{render:' + functionWrap(vueResult.render)
                + ',staticRenderFns:' + functionArrayWrap(vueResult.staticRenderFns)
                + '}';
        }
    } else {
        template = JSON.stringify(template);
    }

    template = 'module.exports = ' + template;
    // console.log("Template compiled: " + fileName + "\n" + template);

    if (error) {
        this.callback(Error(error));
        return;
    }

    if (this.sourceMap) {
        let gen = new SourceMapGenerator({
            file: this.resourcePath + '.js'
        });

        gen.addMapping({
            source: this.resourcePath,
            generated: {
                column: 0,
                line: 1
            },
            original: {
                column: 0,
                line: 1
            }
        });

        gen.setSourceContent(this.resourcePath, html);
        let sm = gen.toJSON();
        // HACK: https://github.com/webpack/webpack-sources/issues/34
        this.callback(null, template, sm as any);
    } else {
        this.callback(null, template);
    }
};

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const loader_utils_1 = require("loader-utils");
const html_minifier_1 = require("html-minifier");
const vue_template_compiler_1 = require("vue-template-compiler");
let minifierOptions = {
    caseSensitive: false,
    collapseBooleanAttributes: true,
    collapseInlineTagWhitespace: false,
    collapseWhitespace: true,
    conservativeCollapse: true,
    decodeEntities: false,
    html5: true,
    includeAutoGeneratedTags: true,
    keepClosingSlash: false,
    minifyCSS: false,
    minifyJS: false,
    minifyURLs: false,
    preserveLineBreaks: false,
    preventAttributesEscaping: false,
    processConditionalComments: false,
    removeAttributeQuotes: false,
    removeComments: true,
    removeEmptyAttributes: false,
    removeEmptyElements: false,
    removeOptionalTags: false,
    removeRedundantAttributes: true,
    removeScriptTypeAttributes: true,
    removeStyleLinkTypeAttributes: true,
    removeTagWhitespace: false,
    sortAttributes: true,
    sortClassName: true,
    trimCustomFragments: false,
    useShortDoctype: false
};
function functionWrap(s) {
    return 'function(){' + s + '}';
}
function functionArrayWrap(ar) {
    let result = ar.map(s => functionWrap(s)).join(',');
    return '[' + result + ']';
}
module.exports = function (template) {
    let options = loader_utils_1.getOptions(this);
    template = html_minifier_1.minify(template, minifierOptions).trim();
    let error = '';
    switch (options.mode) {
        case 'vue': {
            let vueResult = vue_template_compiler_1.compile(template);
            let error = vueResult.errors[0];
            if (!error) {
                template = '{render:' + functionWrap(vueResult.render)
                    + ',staticRenderFns:' + functionArrayWrap(vueResult.staticRenderFns)
                    + '}';
            }
            break;
        }
        case 'string': {
            template = JSON.stringify(template);
            break;
        }
        default: {
            error = 'Unknown template-loader mode: ' + options.mode;
        }
    }
    template = 'module.exports = ' + template;
    if (error) {
        this.callback(Error(error));
    }
    else {
        this.callback(null, template);
    }
};
